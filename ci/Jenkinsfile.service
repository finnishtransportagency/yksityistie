import groovy.json.JsonOutput

def get_environment() {
    if (BRANCH_NAME.equals("develop")) { return "dev" }
    if (BRANCH_NAME.equals("master")) { return "prod" }
    if (BRANCH_NAME.startsWith("release-")) { return "test" }
    return ""
}

def get_pollSCM_trigger() {
    if (get_environment().equals("dev")) { return "H/5 * * * *" }
    return ""
}

def get_version(version) {
    def version_xyz = version.tokenize("-").first()
    if (get_environment().equals("dev")) { return "${version_xyz}-SNAPSHOT" }
    if (get_environment().equals("prod")) { return "${version_xyz}" }
    if (get_environment().equals("test")) { return "${version_xyz}-RC-SNAPSHOT" }
    return "${version_xyz}-${get_environment().toUpperCase()}-SNAPSHOT"
}

pipeline {
    agent any
    environment {
        MAIL_CRED = credentials("mail-cred-prod")
        MAIL_HOST = credentials("mail-host-prod")
        MAIL_PORT = credentials("mail-port-prod")
		CAPTCHA_SECRET = credentials("captcha-secret-prod")
        NOTIFY_SLACK_SUBJECT = "${JOB_NAME} - <${RUN_DISPLAY_URL}|${BUILD_DISPLAY_NAME}>"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "25"))
        disableConcurrentBuilds()
    }
    parameters {
        choice(
            choices: "service-deploy-springboot\nservice-restart\nservice-start\nservice-stop",
            description: "Action to execute.",
            name: "action"
        )
    }
    triggers {
        pollSCM(get_pollSCM_trigger())
    }
    stages {
        stage("Setup") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                script {

                    def pom = readMavenPom()

                    def target_environment = get_environment()
                    
                    def artifact_id = pom.artifactId
                    def artifact_version = get_version(pom.version)
                    def group_id = pom.groupId
                    def extension = pom.packaging
                    def filename = "target/${artifact_id}-${artifact_version}.${extension}"
                    def repository_url = "http://livibuild03.vally.local/nexus/repository/ptp"

                    STAGE_ACK_PARAMETERS = [
                        choice(choices: target_environment, description: "Environment", name: "target_environment"),
                        choice(choices: params.action, description: "Action", name: "action")
                    ]

                    def config = "src/main/resources/application.properties"

                    STAGE_BUILD_CMD = [
						"proxy_ip=\"127.0.0.1\"",
                        "sed -i 's/MAIL_CRED/${MAIL_CRED}/g' ${config}",
                        "sed -i 's/MAIL_HOST/${MAIL_HOST}/g' ${config}",
			            "sed -i 's/MAIL_PORT/${MAIL_PORT}/g' ${config}",
						"sed -i 's/CAPTCHA_SECRET/${CAPTCHA_SECRET}/g' ${config}",
						"sed -i 's~HTTPS_PROXY~${proxy_ip}~g' ${config}",
						"tail -n 100 ${config}",
                        [
                            "mvn",
                            "versions:set",
                            "-DnewVersion=${artifact_version}",
                            "--batch-mode"
                        ].join(" "),
                        [
                            "mvn",
                            "clean",
                            "install",
                            "--batch-mode"
                        ].join(" ")
                    ].join(" && ")

                    STAGE_CONFIRM_TEXT = "Create release ${group_id}:${artifact_id}@${artifact_version} and deploy to ${target_environment}?"

                    STAGE_PUBLISH_CMD = [
                        "mvn",
                        "deploy:deploy-file",
                        "-Dfile=${filename}",
                        "-DpomFile=pom.xml",
                        "-DrepositoryId=nexus3",
                        "-Durl=${repository_url}",
                        "--batch-mode"
                    ].join(" ")

                    STAGE_ANSIBLE_PARAMETERS = [
                        inventory: "/data1/ansible/inventories/ptpapp",
                        playbook: "/data1/ansible/ptpapp.yml",
                        vaultCredentialsId: "vaultpass-ptp",
                        tags: params.action
                    ]
                    
                    def ansible_extravars = [
                        ptpapp_service_springboot: artifact_id,
                        ptpapp_target: get_environment()
                    ]

                    if (params.action.equals("service-deploy-springboot")) {

                        STAGE_ACK_PARAMETERS.addAll([
                            choice(choices: artifact_id, description: "Artifact ID", name: "artifact_id"),
                            choice(choices: artifact_version, description: "Artifact version", name: "artifact_version"),
                            choice(choices: group_id, description: "Group ID", name: "group_id")
                        ])

                        def ansible_deploy = [
                            artifact_id: artifact_id,
                            extension: extension,
                            group_id: group_id,
                            repository_url: repository_url,
                            version: artifact_version
                        ]

                        ansible_extravars.put("ptpapp_deploy_springboot", JsonOutput.toJson(ansible_deploy))
                    }
                    STAGE_ANSIBLE_PARAMETERS.put("extraVars", ansible_extravars)
                }
            }
        }
        stage("Ack") {
            agent none
            options {
                timeout(time: 5, unit: "MINUTES")
            }
            when {
                beforeAgent true
                expression {
                    (get_environment()?.trim() && !get_pollSCM_trigger().trim()) ||
                    (get_environment()?.trim() && !params.action.equals("service-deploy-springboot"))
                }
            }
            steps {
                slackSend(
                    color: "warning",
                    message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} requires acknowledgement! Visit <${RUN_DISPLAY_URL}|here> and verify!"
                )
                input(
                    message: "Proceed with following settings?",
                    parameters: STAGE_ACK_PARAMETERS
                )
            }
            post {
                aborted {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted because acknowledgement timeout exceeded or user action!"
                    )
                }
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        
        stage("Docker") {
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim() && params.action.equals("service-deploy-springboot")
                }
            }
            steps {
                sh "cp /data1/ci/maven/* ci/confs/"
                script {
                    def jenkins_uid = sh(returnStdout: true, script: "id -u").trim()
                    def build_args = [
                        "--build-arg http_proxy=${http_proxy}",
                        "--build-arg https_proxy=${http_proxy}",
                        "--build-arg no_proxy=${no_proxy}",
                        "--build-arg JENKINS_UID=${jenkins_uid}"
                    ].join(" ")
                    docker.build(
                        "ptpapp-yksityistie-maven",
                        "${build_args} -f ci/Dockerfile.maven ci"
                    )
                }
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }

        stage("Build") {
            agent {
                docker {
                    image "ptpapp-yksityistie-maven"
                    reuseNode true
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim() && params.action.equals("service-deploy-springboot")
                }
            }
            steps {
                sh STAGE_BUILD_CMD
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Confirm") {
            agent none
            options {
                timeout(time: 5, unit: "MINUTES")
            }
            when {
                beforeAgent true
                expression {
                    get_environment().equals("prod") && params.action.equals("service-deploy-springboot")
				}            
            }
            steps {
                slackSend(
                    color: "warning",
                    message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} requires confirmation! Visit <${RUN_DISPLAY_URL}|here> and verify!"
                )
                input STAGE_CONFIRM_TEXT
            }
            post {
                aborted {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted because confirmation timeout exceeded or user action!"
                    )
                }
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Publish") {
            agent {
                docker {
                    image "ptpapp-yksityistie-maven"
                    reuseNode true
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim() && params.action.equals("service-deploy-springboot")
                }
            }
            steps {
                sh STAGE_PUBLISH_CMD
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Ansible") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                ansiblePlaybook(STAGE_ANSIBLE_PARAMETERS)
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Test") {
            when {
                expression {
                    get_environment()?.trim() && !params.action.equals("service-stop")
                }
            }
            steps {
                build(
                    job: "ptpapp/yksityistie/test/${BRANCH_NAME}",
                    propagate: false,
                    wait: params.action.endsWith("start") ? true : false
                )
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT} - Stage ${STAGE_NAME} failure!\nCheck <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
    }
    post {
        always {
            slackSend(
                color: currentBuild.currentResult.equals("SUCCESS") ? "good" : "danger",
                message: "${NOTIFY_SLACK_SUBJECT}\nJob ${currentBuild.currentResult}! More info <${BUILD_URL}|here>."
            )
            deleteDir()
        }
    }
}
